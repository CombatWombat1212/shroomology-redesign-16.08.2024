@function mapReverse ($map) {
    $result: null;

    @if type-of($map)=="map" {
        $keys: map-keys($map);
        $map-reversed: ();

        @for $i from length($keys) through 1 {
            $map-reversed: map-merge($map-reversed,
                    (nth($keys, $i): map-get($map, nth($keys, $i))));
        }

        @if type-of($map-reversed)=="map" {
            $result: $map-reversed;
        }

        @else {
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    }

    @else {
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}


@function reverse-map($map) {
  $reversed: ();
  @each $key, $value in $map {
    $reversed: map-merge(($key: $value), $reversed);
  }
  @return $reversed;
}



@function mapReverseLastOnTop($map) {
    $result: null;
  
    @if type-of($map) == "map" {
      $keys: map-keys($map);
      $map-reversed: ();
  
      @if length($keys) > 1 {
        $map-reversed: map-merge($map-reversed, (nth($keys, 1): map-get($map, nth($keys, 1))));
  
        @for $i from length($keys) through 2 {
          $map-reversed: map-merge($map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i))));
        }
      } @else {
        $map-reversed: $map;
      }
  
      @if type-of($map-reversed) == "map" {
        $result: $map-reversed;
      } @else {
        @warn 'There was an error reversing the order of "#{$map}"';
      }
    } @else {
      @warn '"#{$map}" is not a valid map';
    }
  
    @return $result;
  }
  




@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}


@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index: str-index($string, $separator);

    // loop through string
    @while $index !=null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index: str-index($string, $separator);
    }

    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}


@function to-number($value) {
    @if type-of($value)=='number' {
        @return $value;
    }

    @else if type-of($value) !='string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1)=='-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character=='.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character=='.' {
            $digits: 1;
        }

        @else if $digits==0 {
            $result: $result * 10 + map-get($numbers, $character);
        }

        @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);

}




///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {
        $_: log('Invalid unit `#{$unit}`.');
    }

    @return $value * map-get($units, $unit);
}





@function contains($string, $substring) {
    @if str-index($string, $substring) {
        @return true;
    }

    @else {
        @return false;
    }
}

@function str-trim($string) {
    $string: str-replace($string, '  ', ' ');
    $string: str-replace($string, ' ', '');
    @return $string;
  }
  

@function px-to-rem($val){
    @return $val / 16;
}








@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);

    @if not $n {
        @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }

    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}



// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min !=0, $min, null);
}





// all this does is apply the subtractor to a provided breakpoint value
// Maximum breakpoint width.
// The maximum value is reduced by subtractor to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses subtractor rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - $subtractor, null);
}


@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}







//Give !important to all utilities
$enable-important-utilities: false !default;


// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
    $values: map-get($utility, values);
    $defaults: map-get($utility, defaults);

    // If the values are a list or string, convert it into a map
    @if type-of($values)=="string"or type-of(nth($values, 1)) !="list" {
        $values: zip($values, $values);
    }

    @each $key,
    $value in $values {
        $properties: map-get($utility, property);

        // Multiple properties are possible, for example with vertical or horizontal margins or paddings
        @if type-of($properties)=="string" {
            $properties: append((), $properties);
        }

        // Use custom class if present
        $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class: if($property-class==null, "", $property-class);

        // Get important 
        $important: if(map-has-key($utility, important), map-get($utility, important), $enable-important-utilities);

        // State params to generate pseudo-classes
        $state: if(map-has-key($utility, state), map-get($utility, state), ());

        $infix: if($property-class==""and str-slice($infix, 1, 1)=="-", str-slice($infix, 2), $infix);

        // Don't prefix if value key is null (eg. with shadow class)
        $property-class-modifier: if($key, if($property-class==""and $infix=="", "", "-") + $key, "");

        @if map-get($utility, rfs) {

            // Inside the media query
            @if $is-rfs-media-query {
                $val: rfs-value($value);

                // Do not render anything if fluid and non fluid values are the same
                $value: if($val==rfs-fluid-value($value), null, $val);
            }

            @else {
                $value: rfs-fluid-value($value);
            }
        }

        $is-rtl: map-get($utility, rtl);

        @if $value !=null {
            @if $is-rtl==false {
                /* rtl:begin:remove */
            }

            .#{$property-class + $infix + $property-class-modifier} {
                @each $property in $properties {
                    // #{$property}: $value if($enable-important-utilities,  !important, null);
                    #{$property}: $value if($important,  !important, null);
                }

                @if $defaults {
                    @each $k,
                    $v in $defaults {

                        @if $v {
                            // #{$k}: $v if($enable-important-utilities,  !important, null);
                            #{$k}: $v if($important,  !important, null);
                        
                        }
                    }
                }


            }

            @each $pseudo in $state {
                .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                    @each $property in $properties {
                        // #{$property}: $value if($enable-important-utilities,  !important, null);
                        #{$property}: $value if($important,  !important, null);
                    }
                }
            }

            @if $is-rtl==false {
                /* rtl:end:remove */
            }
        }


    }





}



@function trim-id($selector) {
    $selector-ids: ();
    $selector-parts: str-split($selector, ' ');
  
    @each $part in $selector-parts {
      @if str-index($part, '#') {
        $selector-ids: append($selector-ids, $part);
      }
    }
  
    @return join($selector-ids, ' ');
  }
  


  @function nth-children($base-selector, $optional-selector: null, $numbers...) {
    $selector: "";
  
    @for $i from 1 through length($numbers) {
      $selector: $selector + "#{$base-selector}:nth-child(#{nth($numbers, $i)})";
      @if $optional-selector != null {
        $selector: $selector + " #{$optional-selector}";
      }
      @if $i < length($numbers) {
        $selector: $selector + ", ";
      }
    }
  
    @return $selector;
  }
  


  @function col-gap-width($container-width: var(--site-max-width), $col: var(--col), $gap: var(--gap), $additional: 0rem) {
    @return calc(((#{$container-width} - (#{$gap} * (#{$col} - 1))) / #{$col}) - #{$additional});
  }
  

  @function weighted-average($value1: var(--value1), $value2: var(--value2), $bool: var(--bool)) {
    @return calc(#{$value1} * #{$bool} + #{$value2} * (1 - #{$bool}));
  }



  @function min-mid-max($min, $mid, $max) {
    @return Min(Max($min, $mid), $max);
    // width: Min(Max(75%, var(--w)), 90%);

  }


  @function hex-to-rgba($hex-color, $opacity) {
    @return rgba(
      red($hex-color),
      green($hex-color),
      blue($hex-color),
      $opacity
    );
  }




  @function zoom-vh($val){
    @return calc(#{$val} / var(--zoom));
  }

    @function zoom-vw($val){
        @return calc(#{$val} / var(--zoom));
    }



    @function remove-from-array($array, $value) {
        $result: ();
        @each $item in $array {
          @if $item != $value {
            $result: append($result, $item);
          }
        }
        @return $result;
      }
      
      
      @function map-remove-multiple($map, $keys) {
        $result: $map;
        @each $key in $keys {
          $result: map-remove($result, $key);
        }
        @return $result;
      }
      

      @function map-get-multiple($map, $keys) {
        $result: ();
        @each $key in $keys {
          $value: map-get($map, $key);
          @if $value != null {
            $result: map-merge($result, ($key: $value));
          }
        }
        @return $result;
      }
      

      @function is-zero-unit($value) {
        @return (unitless($value) and $value == 0) or (not unitless($value) and ($value == 0 * 1px or $value == 0 * 1em or $value == 0 * 1% or $value == 0 * 1rem or $value == 0 * 1vw or $value == 0 * 1vh));
      }
                        

      @function is-empty-map($map) {
        @each $key, $value in $map {
          @return false;
        }
        @return true;
      }
      


      @function to-unitless($value) {
        @if unitless($value) {
          @return $value;
        } @else {
          @return $value / ($value * 0 + 1);
        }
      }
      

      @function get-last-key($map) {
        $last-key: null;
        @each $key, $value in $map {
          $last-key: $key;
        }
        @return $last-key;
      }
      

      @function is-list-of-two-numbers($value) {
        @return type-of($value) == "list" and length($value) == 2 and type-of(nth($value, 1)) == "number" and type-of(nth($value, 2)) == "number";
      }
    