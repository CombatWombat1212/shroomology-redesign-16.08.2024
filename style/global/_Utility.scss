// TODO: isn't working

// $spacer: 1rem !default;
$spacer: 2rem !default;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 2,
  6: $spacer * 3,
) !default;
$spacers_section: (
  0: 0,
  1: calc(var(--section-text-spacing) * #{(1/1.75)}),
  2: calc(var(--section-text-spacing) * #{(1/1)}),
  3: calc(var(--section-text-spacing) * #{(1 * 1.75)}),
  4: calc(var(--section-text-spacing) * #{(1 * 2.25)}),
  5: calc(var(--section-text-spacing) * #{(1 * 2.75)}),
  6: calc(var(--section-text-spacing) * #{(1 * 3.25)}),
) !default;

// stylelint-disable indentation

// Utilities

$utilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-merge(
  (
    // scss-docs-start utils-vertical-align
    // "align": (property: vertical-align,
    //     class: align,
    //     values: baseline top middle bottom text-bottom text-top),
    // // scss-docs-start utils-float
    // "float": (responsive: true,
    //     property: float,
    //     values: (start: left,
    //         end: right,
    //         none: none,
    //     )),
    // // scss-docs-end utils-float
    // // scss-docs-start utils-overflow
    // "overflow": (property: overflow,
    //     values: auto hidden visible scroll,
    // ),
    // // scss-docs-end utils-overflow
    // // scss-docs-start utils-display
    // "display": (responsive: true,
    //     important: true,
    //     property: display,
    //     class: d,
    //     values: block grid flex none),
    // "flex": (
    //     responsive: true,
    //     property: flex-direction,
    //     important: true,
    //     class: flex,
    //     values: (
    //         col: column,
    //         row: row,
    //         ),
    //     defaults: (
    //         display: flex,
    //     ) ),
    // "flex-wrap": (
    //     property: flex-wrap,
    //     important: true,
    //     class: flex,
    //     values: (
    //         wrap: wrap,
    //         ),
    //     defaults: (
    //         display: flex,
    //     ) ),
    // "position": (property: position,
    //     values: static relative absolute fixed sticky),
    // "gap": (responsive:true,
    //     property: --column-gap --row-gap --gap column-gap row-gap gap,
    //     class: gap,
    //     values: $spacers),
    "margin-bottom":
      (
        property: margin-bottom,
        class: mb,
        values: $spacers,
      ),
    // "padding-bottom": (
    //     property: padding-bottom,
    //     class: pb,
    //     values: $spacers),
    // "padding-top": (
    //     property: padding-top,
    //     class: pt,
    //     values: $spacers),
    // "padding-y": (
    //     property: (padding-top, padding-bottom),
    //     class: py,
    //     values: $spacers),
    // "margin": (
    //     property: margin,
    //     class: m,
    //     values: (auto:auto)),
    // "margin-y": (
    //     property: (margin-top, margin-bottom),
    //     class: my,
    //     values: (auto:auto)),
    // "margin-x": (
    //     property: (margin-left, margin-right),
    //     class: mx,
    //     values: (auto:auto)),
    // "height": (
    //     property: height,
    //     important: true,
    //     class: h,
    //     values: (auto:auto,
    //     unset: unset)),
    // "width": (
    //     property: width,
    //     important: true,
    //     class: w,
    //     values: (auto:auto,
    //     unset: unset, 100:100%)),
    // "border-radius": (
    //     property: border-radius,
    //     important: true,
    //     class: b,
    //     values: (
    //         rad: var(--b-rad),
    //         round: 1000rem,
    //         ),
    //     defaults: (
    //         overflow: hidden,
    //     )),
    // "padding": (property: padding,
    //     class: p,
    //     values: ($spacers),
    //     important: true,
    //     ),
    // "text-col": (
    //     responsive:true,
    //     property: column-count,
    //     class: text-col,
    //     values: (
    //         1: 1,
    //         2: 2,
    //         3: 3,
    //         4: 4,
    //         )
    //     ),
    // "text-align": (
    //     responsive:true,
    //     property: 'text-align',
    //     class: text-align,
    //     values: (
    //         center: center,
    //         )
    //     ),
    // "text-gap": (
    //     property: column-gap,
    //     class: text-gap,
    //     values: $spacers,
    //     ),
    // "min-viewport-width": (property: min-width,
    //     class: min-vw,
    //     values: (100: 100vw)),
    // "height": (property: height,
    //     class: h,
    //     values: (
    //         fit: fit-content,
    //         // 50: 50%,
    //         // 75: 75%,
    //         // 100: 100%,
    //         // auto: auto
    //         )),
    // "max-height": (property: max-height,
    //     class: mh,
    //     values: (100: 100%)),
    // "viewport-height": (property: height,
    //     class: vh,
    //     values: (100: 100vh)),
    // "min-viewport-height": (property: min-height,
    //     class: min-vh,
    //     values: (100: 100vh)),
    // "justify-content": (
    //     responsive: true,
    //     class: 'just',
    //     property: justify-content,
    //     values: (
    //         // start: flex-start,
    //         // end: flex-end,
    //         center: center,
    //         bet: space-between,
    //         around: space-around,
    //     )),
    // "align": (
    //     responsive: true,
    //     class: 'al',
    //     property: align-content,
    //     values: (
    //         center: center,
    //     )),
    // "margin-x": (responsive: true,
    //     property: margin-right margin-left,
    //     class: mx,
    //     values: map-merge($spacers, (auto: auto))),
    // "margin-y": (responsive: true,
    //     property: margin-top margin-bottom,
    //     class: my,
    //     values: map-merge($spacers, (auto: auto))),
    // "margin-top": (responsive: true,
    //     property: margin-top,
    //     important: true,
    //     class: mt,
    //     values: map-merge($spacers, (auto: auto))),
    // "section-margin-top": (
    //     responsive: true,
    //     property: margin-top,
    //     important: true,
    //     class: mts,
    //     values: map-merge($spacers_section, (auto: auto))),
    // "margin-bottom": (responsive: true,
    //     property: margin-bottom,
    //     class: mb,
    //     values: map-merge($spacers, (auto: auto))),
    // scss-docs-end utils-bg-color
  ),
  $utilities
);

//Generate Utilities
// Testing, i added inverted to this to see if it corrected a bug with the cascade
// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints_inverted) {
  // Generate media query if needed
  @include media-breakpoint-down($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints_inverted);

    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix== "") {
        @include generate-utility($utility, $infix);
      }
    }
  }
}

// RFS rescaling
@media (min-width: $rfs-mq-value) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @if (map-get($grid-breakpoints, $breakpoint) < $rfs-breakpoint) {
      // Loop over each utility property
      @each $key, $utility in $utilities {
        // The utility can be disabled with `false`, thus check if the utility is a map first
        // Only proceed if responsive media queries are enabled or if it's the base media query
        @if type-of($utility) ==
          "map" and
          map-get($utility, rfs) and
          (map-get($utility, responsive) or $infix== "")
        {
          @include generate-utility($utility, $infix, true);
        }
      }
    }
  }
}
